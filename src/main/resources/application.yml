context:
  envName: ${CONTEXT_ENV_NAME:dev01}

spring:
  # Spring Data JPA
  data.mongodb:
    port: 27017
    host: localhost

  # Spring Cloud Stream
  cloud:
    function.definition: generateTickerDataModel
    stream:
      bindings:
        # Input(s)
        generateTickerDataModel-in-0:
          destination: ${INPUT_TOPIC_0}
        generateTickerDataModel-in-1:
          destination: ${INPUT_TOPIC_1}

      kafka.streams:
        bindings:
          generateTickerDataModel-in-0-consumer:
            applicationId: dfdfdf
            dlqName: dlq name
          generateTickerDataModel-in-1-consumer:
            applicationId: dfdfdf
            materializedAs: state store name to materialise incoming data with
            dlqName: dlq name 2
          # Additional State Stores
          stateStore:
            stateStoreOneName: my state store one name

        binder:
          brokers: broker
          deserializationExceptionHandler: logAndFail # Optional: logAndFail, sendToDlq, logAndSkip
          configuration:
            # Internal Topics
            replication.factor: ${INTERNAL_TOPIC_REPLICATION_FACTOR:3}
            # Broker Security
            ssl.endpoint.identification.algorithm: ${SECURITY_SSL_ENDPOINT_ID_ALGO}
            sasl.mechanism: ${SECURITY_SASL_MECHANISM}
            security.protocol: ${SECURITY_PROTOCOL}
            sasl.jaas.config: ${SECURITY_SASL_JAAS_CONFIG}
            # SerDes
            default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
            default.value.serde: org.springframework.kafka.support.serializer.JsonSerde




